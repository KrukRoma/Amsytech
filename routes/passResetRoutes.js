const express = require('express');
const nodemailer = require('nodemailer');
const bcrypt = require('bcryptjs');
const db = require('../db'); // –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MySQL
const router = express.Router();

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Nodemailer
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  },
  tls: {
    rejectUnauthorized: false,
  }
});

// –ì–µ–Ω–µ—Ä—É—î–º–æ –≤–∏–ø–∞–¥–∫–æ–≤–∏–π 6-–∑–Ω–∞—á–Ω–∏–π –∫–æ–¥
const generateResetCode = () => Math.floor(100000 + Math.random() * 900000).toString();

// üìå –í—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∫–æ–¥—É –Ω–∞ email
router.post('/request', async (req, res) => {
  const { email } = req.body;
  const resetCode = generateResetCode();
  const expiresAt = new Date(Date.now() + 15 * 60 * 1000);

  try {
    await db.execute(
      'INSERT INTO password_reset (email, code, expires_at) VALUES (?, ?, ?) ON DUPLICATE KEY UPDATE code = ?, expires_at = ?',
      [email, resetCode, expiresAt, resetCode, expiresAt]
    );

    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: email,
      subject: '–ö–æ–¥ –¥–ª—è —Å–∫–∏–¥–∞–Ω–Ω—è –ø–∞—Ä–æ–ª—è',
      text: `–í–∞—à –∫–æ–¥: ${resetCode}. –î—ñ—î 15 —Ö–≤–∏–ª–∏–Ω.`
    });

    res.json({ message: '–ö–æ–¥ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ!' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:', error);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ –∫–æ–¥—É' });
  }
});

// üìå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–æ–¥—É
router.post('/verify', async (req, res) => {
  const { email, code } = req.body;

  try {
    const [rows] = await db.execute(
      'SELECT * FROM password_reset WHERE email = ? AND code = ? AND expires_at > NOW()',
      [email, code]
    );

    if (rows.length === 0) {
      return res.status(400).json({ message: '–ù–µ–≤—ñ—Ä–Ω–∏–π –∞–±–æ –ø—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–∏–π –∫–æ–¥' });
    }

    res.json({ message: '–ö–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π!' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏:', error);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –∫–æ–¥—É' });
  }
});

// üìå –ó–º—ñ–Ω–∞ –ø–∞—Ä–æ–ª—è
router.post('/reset', async (req, res) => {
  const { email, newPassword } = req.body;

  try {
    // –•–µ—à—É—î–º–æ –Ω–æ–≤–∏–π –ø–∞—Ä–æ–ª—å
    const hashedPassword = await bcrypt.hash(newPassword, 10);
    
    // –û–Ω–æ–≤–ª—é—î–º–æ –ø–∞—Ä–æ–ª—å —É –±–∞–∑—ñ
    await db.execute('UPDATE users SET password = ? WHERE email = ?', [hashedPassword, email]);

    // –í–∏–¥–∞–ª—è—î–º–æ –∫–æ–¥ —Å–∫–∏–¥–∞–Ω–Ω—è
    await db.execute('DELETE FROM password_reset WHERE email = ?', [email]);

    res.json({ message: '–ü–∞—Ä–æ–ª—å –∑–º—ñ–Ω–µ–Ω–æ!' });
  } catch (error) {
    console.error('–ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ –ø–∞—Ä–æ–ª—è:', error);
    res.status(500).json({ message: '–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–º—ñ–Ω—ñ –ø–∞—Ä–æ–ª—è' });
  }
});

module.exports = router;
